EnglishPal Dependency Analysis and Dependency Graph
===================================

Author：李采奕，窦凯雯，徐阳奕，谢思媛

Date：2021/5/17

Abstract
--------

Introduction
--------
EnglishPal-master is a website application used to help English learners improve their reading level and recite new words. The lab analyzed the health status of the EnglishPal’s current architecture with the help of module-level dependency and class/function-level dependency.

Materials and Methods
--------
The module-level dependencies graph of English graph is generated by snakefood, and the class or function-level dependency graph is drawn by ourselves.Mermaid can help to generate the  class or function-level dependency graph.

Results
--------
1.The module-level dependencies： 

.. snakefood::
   strict digraph "dependencies" {
   graph [
           rankdir = "LR",
           overlap = "scale",
           size = "8,10",
           ratio = "fill",
           fontsize = "16",
           fontname = "Helvetica",
           clusterrank = "local"
           ]

          node [
              fontsize=12
              shape=ellipse
          ];


      "UseSqlite.py"  [style=filled];
      "UseSqlite.py" -> "sqlite3";
      "WordFreq.py"  [style=filled];
      "WordFreq.py" -> "wordfreqCMD.py";
      "WordFreq.py" -> "string.py";
      "difficulty.py"  [style=filled];
      "difficulty.py" -> "wordfreqCMD.py";
      "difficulty.py" -> "math";
      "difficulty.py" -> "pickle.py";
      "main.py"  [style=filled];
      "main.py" -> "UseSqlite.py";
      "main.py" -> "WordFreq.py";
      "main.py" -> "difficulty.py";
      "main.py" -> "pickle_idea.py";
      "main.py" -> "pickle_idea2.py";
      "main.py" -> "wordfreqCMD.py";
      "main.py" -> "datetime";
      "main.py" -> "glob.py";
      "main.py" -> "os.py";
      "main.py" -> "random.py";
      "main.py" -> "flask.py"
      "pickle_idea.py"  [style=filled];
      "pickle_idea.py" -> "pickle.py";
      "pickle_idea2.py"  [style=filled];
      "pickle_idea2.py" -> "datetime";
      "pickle_idea2.py" -> "pickle.py";
      "wordfreqCMD.py"  [style=filled];
      "wordfreqCMD.py" -> "pickle_idea.py";
      "wordfreqCMD.py" -> "collections.py";
      "wordfreqCMD.py" -> "operator";
      "wordfreqCMD.py" -> "os.py";
      "wordfreqCMD.py" -> "string.py";
      "wordfreqCMD.py" -> "sys";
      }

.. image:: class.png

2.The class/function level dependencies:

.. mermaid::
   graph LR
   total_number_of_essays -->UseSqlite.RecordQuery
   load_freq_history -->pickle_idea.load_record
   verify_user --> UseSqlite.RecordQuery
   add_user -->UseSqlite.InsertQuery
   check_username_availability --> UseSqlite.RecordQuery
   get_expiry_date -->UseSqliteRecordQuery
   get_today_article --> UseSqlite.RecordQuery
   get_today_article --> load_freq_history
   get_today_article --> difficulty.get_difficulty_level
   get_today_article --> difficulty.user_difficulty_level
   get_today_article -->random.shuffle
   get_today_article -->random.choice
   get_today_article -->random.gauss
   get_today_article -->get_article_title
   get_today_article -->get_article_body
   get_today_article --> difficulty.text_difficulty_level
   get_today_article --> within_range
   get_today_article --> get_answer_part
   get_today_article -->get_question_part
  get_flashed_messages_if_any --> get_flashed_messages	
   mark_word --> load_freq_history
   mark_word --> pickle_idea.dict2lst
   mark_word --> pickle_idea.merge_frequency
   mark_word --> pickle_idea.save_frequency_to_pickle
   mainpage --> WordFreq
   mainpage --> load_freq_history
   mainpage --> pickle_idea.dict2lst
   mainpage --> pickle_idea.merge_frequency
   mainpage --> pickle_idea.save_frequency_to_pickle
   mainpage --> pickle_idea.dict2lst
   user_mark_word --> load_freq_history
   user_mark_word -->pickle_idea2.dict2lst
   user_mark_word -->pickle_idea2.merge_frequency
   user_mark_word -->pickle_idea2.save_frequency_to_pickle
   unfamiliar -->pickle_idea.unfamiliar
   familiar -->pickle_idea.familiar
   deleteword -->pickle_idea2.deleteRecord
   userpage --> WordFreq
   userpage --> pickle_idea.load_record
   userpage --> load_freq_history
   userpage --> sort_in_descending_order
   userpage -->get_flashed_messages_if_any
   userpage -->get_today_article
   userpage -->load_freq_history
   userpage -->pickle_idea2.dict2lst
   signup --> check_username_availability
   signup --> render_template
   signup --> add_user
   signup --> verify_user
   login --> render_template
   login --> verify_user
   login -->get_expiry_date

   difficulty.load_record --> pickle.load
   difficulty.get_difficulty_level -->difficulty.difficulty_level_from_frequency
   difficulty.user_difficulty_level -->wordfreqCMD.sort_in_ascending_order
   difficulty.text_difficulty_level -->wordfreqCMD.remove_punctuation
   difficulty.text_difficulty_level -->wordfreqCMD.sort_in_descending_order
   difficulty.text_difficulty_level -->difficulty.load_record
   difficulty.text_difficulty_level -->difficulty.get_difficulty_level

   pickle_idea.merge_frequency --> pickle_idea.lst2dict
   pickle_idea.load_record -->pickle.load
   pickle_idea.save_frequency_to_pickle -->pickle.dump
   pickle_idea.familiar -->pickle.load
   pickle_idea.familiar -->pickle.dump
   pickle_idea.familiar -->pickle_idea.save_frequency_to_pickle
   pickle_idea.familiar -->pickle_idea.load_record
   pickle_idea.familiar -->pickle_idea.merge_frequency

   pickle_idea2.merge_frequency --> pickle_idea2.lst2dict
   pickle_idea2.save_frequency_to_pickle--> pickle_idea2.merge_frequency

   Sqlite3Template.do --> Sqlite3Template.connect
   Sqlite3Template.do --> Sqlite3Template.instructions
   Sqlite3Template.do --> Sqlite3Template.operate

   WordFreq.get_freq --> wordfreqCMD.sort_in_descending_order
   WordFreq.get_freq --> wordfreqCMD.sremove_punctuation
3.Pros and cons of the current architecture of EnglishPal: 
    Disadvantages: 
     1)The speed of transferring picture or other media information between web pages is low. 
     
     2)The server processes multiple requests at the same time, which reduces the operation efficiency. 
     
     3)Code change and maintenance are difficult. 
      
    Advantages: 
      1)API has high security. 
      
      2)Using syntax similar to the pattern for development makes the code readable. 
      
      3)Simple crud and small code base are suitable for smaller projects. 
      
      4)There is less communication between the front end and the back end, reducing the communication cost. 
      

Discussions
--------
During the lab, we learnt to use Snakefood, Graphviz Online, Mermaid as well as Read the Docs. We figured the current health status of the architecture of EnglishPal which can be conducive to the projects we may develop or improve in the future.

References
--------
Graphviz. https://graphviz.org/

Graphviz Online. https://bit.ly/3uYDiLV

Snakefood: Python Dependency Graphs. http://furius.ca/snakefood/

Mermaid. https://mermaid-js.github.io/mermaid/#/

Read the Docs. https://readthedocs.org/

Sofia Peterson. A Brief Guide How to Write a Computer Science Lab Report. https://thehackpost.com/a-brief-guide-how-to-write-a-computer-science-lab-report.html




